SELECT outs.animal_id, outs.name FROM animal_outs outs LEFT JOIN animal_ins ins ON outs.animal_id = ins.animal_id
WHERE ins.animal_id IS NULL ORDER BY outs.animal_id
# animal_outs를 호출하고 outs라 칭한다. 연결 할 animal_ins를 호출하고 ins라 칭한다.
# 표에서 outs의 animal_id와 name을 가져오고 outs와 ins의 animal_id가 같다면 왼쪽에 연결한다.
# 연결하였을 때 ins.animal_id의 빈공간을 NULL처리한다.
# ins에서 NULL처리된 부분을 호출하고 outs의 animal_id로 정렬한다.

SELECT ins.animal_id, ins.name FROM animal_outs outs LEFT JOIN animal_ins ins ON outs.animal_id= ins.animal_id
WHERE ins.datetime >outs.datetime ORDER BY ins.datetime
# animal_outs를 outs, _ins를 ins라 칭한다. _ins표에서 _id가 같은 것을 연결하고 _outs의 내용을 오른쪽에 둔다.
# 연결하였을 때 outs._id의 빈공간을 NULL로 처리한다. _ins.datetime>_outs.datetime일 때 _ins._id를 호출한다.
# 호출된 _ins._id를 _ins.datetime의 내림차순으로 정렬한다.

SELECT INS.NAME, INS.DATETIME FROM ANIMAL_INS INS LEFT JOIN ANIMAL_OUTS OUTS ON INS.ANIMAL_ID = OUTS.ANIMAL_ID
WHERE OUTS.ANIMAL_ID IS NULL ORDER BY INS.DATETIME LIMIT 3
# animal_outs를 outs, _ins를 ins라 칭한다. _ins표에서 _id가 같은 것을 연결하고 _outs의 내용을 오른쪽에 둔다.
# 연결하였을 때 outs._id의 빈공간을 NULL로 처리한다. 이때, outs._id 가 NULL인 경우만 호출한다.
# 호출된 _ins._id를 _ins.date.time의 내림차순으로 정리하고 3가지 데이터만 호출한다.

SELECT INS.ANIMAL_ID, INS.ANIMAL_TYPE, INS.NAME FROM ANIMAL_INS INS LEFT JOIN ANIMAL_OUTS OUTS
ON INS.ANIMAL_ID=OUTS.ANIMAL_ID WHERE INS.SEX_UPON_INTAKE!=OUTS.SEX_UPON_OUTCOME ORDER BY INS.ANIMAL_ID
# animal_outs를 outs, _ins를 ins라 칭한다. _ins표에서 _id가 같은 것을 연결하고 _outs의 내용을 오른쪽에 둔다.
# 연결하였을 때 outs._id의 빈공간을 NULL로 처리한다. 이때, outs._id 가 NULL인 경우만 호출한다.
# 호출된 _ins._id,_type,name을 _id 내림차순으로 정리하고 ins.sex와 outs.sex가 다른 경우만 호출한다.
